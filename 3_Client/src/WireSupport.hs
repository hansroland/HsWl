{-# LANGUAGE OverloadedStrings #-}

module WireSupport where

-- This module contains functions that are used in the code generated by
-- the Haskell Wayland code generator.

import           Types

import Data.Binary
import           Data.Binary.Put
import           Data.Binary.Get
import           Data.Text (Text)
import qualified Data.ByteString            as BL
import qualified Data.ByteString            as BS
import qualified Data.Text                  as T
import qualified Data.Text.IO               as TIO

-- TODO move to Types, define a Binary instance
putFd :: WFd -> Put
putFd  _ = putByteString BS.empty

runByteString :: Put -> BL.ByteString
runByteString = BL.toStrict . runPut

unhandledEv :: Text -> WOpc -> IO()
unhandledEv ifName opc = TIO.putStrLn $
   "ATTENTION UNHANDLED EVENT " <> ifName <> " " <>  T.pack (show opc)

-- TODO replace with normal get !!
parseWObj :: Get WObj
parseWObj = WObj . fromIntegral <$> getWord32host

-- TODO replace with normal get !!
parseWOpc :: Get WOpc
parseWOpc = WOpc . fromIntegral <$> getWord16host

-- TODO move to Types, define a Binary instance
parseWFd :: Get WFd
parseWFd = error "parseWFD is not yet defined"

-- TODO move to Types, define a Binary instance
parseWFixed :: Get WFixed
parseWFixed = error "parseWFixed is not yet defined in WireSupport"

-- TODO move to Types, define a Binary instance
parseWArray :: Get WArray
parseWArray = error "parseWArray is not yet defined in WireSupport"



initActiveIfaces :: [IfacKey]
initActiveIfaces = [ (1, "wl_display")]

    -- Note the wlRegistryBind function in the xml file is wrong
rsxRegistryBind :: WObj -> WUint -> WString -> WUint -> WNewId -> BS.ByteString
rsxRegistryBind wobj name interface version xid = runByteString $ do
   put wobj
   put $ WOpc 0
   putWord16host $ fromIntegral $ 20 + calcWStringLength interface
   put name
   put interface
   put version
   put xid





